/*====================================================================================================*/
/**
\defgroup usart_config Configuration
\ingroup  dv_usart

The USART driver validation settings are defined in the **DV_USART_Config.h** configuration file.

\image html dv_usart_config_h.png "DV_USART_Config.h configuration file in Configuration Wizard view mode"

Some settings depend on the test environment and may require adjustment to ensure proper operation of the USART
Driver Validation suite.

\section usart_config_detail Configuration settings

**Driver_USART#** selects the driver instance to be tested.  
Example: to test `Driver_USART2`, set this value to `2`.

**Configuration** contains settings for **Test Mode**, **USART Server**, and **Tests**:

- **Test Mode**: **Loopback** or **USART Server**.  
  - *Loopback* is recommended for initial validation. It requires Tx and Rx pins to be connected together so that
    basic functionality can be verified.  
  - For *full* compliance with the CMSIS-Driver USART specification, use **USART Server** mode.

- **USART Server** (applies only when *Test Mode: USART Server* is selected):  
  Communication parameters at which Driver Validation communicates with the USART Server. These **must match** the
  settings on the USART Server.  
  - Fixed (non-configurable) parameters:  
    - **Baudrate:** 115200  
    - **Data Bits:** 8  
    - **Parity:** None  
    - **Stop Bits:** 1  
    - **Flow Control:** None
  - Configurable parameter:  
    - **Mode** - communication mode with the USART Server. Different modes require different physical connections and the
      USART Server must be configured accordingly. For details, see \ref usart_server_con "USART Server connection".

- **Tests**: configuration for test execution.  
  - **Default settings** - default parameters for data exchange tests. Typically, a single feature is varied while all
    other parameters use defaults. For defaults used by each function, see \ref usart_tests_data_xchg.  
  - **Baudrate** - minimum and maximum bus speeds used by \ref USART_Baudrate_Min and \ref USART_Baudrate_Max.  
  - **Number of Items** - a selection of item counts (including unusual/odd counts) used by \ref USART_Number_Of_Items
    to verify transfers comply with the CMSIS-Driver specification.

**Tests** section - enable/disable test groups (and individual tests):  
- **Driver Management** - see \ref usart_tests_drv_mgmt.  
- **Data Exchange** - see \ref usart_tests_data_xchg.  
- **Modem** - see \ref usart_tests_modem.  
- **Event** - see \ref usart_tests_evt.

*/

/*====================================================================================================*/
/**
\defgroup usart_server USART Server
\ingroup  dv_usart

The **USART Server** is an application used by the CMSIS-Driver Validation suite to test the *physical* operation of
the USART driver.

It is available for the STMicroelectronics **STM32F429I-DISC1** board and as a template for **any board**
with available **Board Layer** and configured **CMSIS compliant USART driver**.

\note STM32F429I-DISC1 was selected because its USART driver is stable and supports all required features.
\note For running on the STM32F429I-DISC1 board, see \ref usart_server_disc1.
\note For running on other hardware, see \ref usart_server_template.

\section usart_server_features Features
- Read **version** information
- Read **capabilities** information
- Set and read **data buffer** contents
- Read last **send/receive/transfer counts**
- **Send**, **receive**, and **transfer** (synchronous mode) operations
- Generate **break** signal and read **break status**
- Control and read **modem lines**

\section usart_server_oper Operation
The Server waits for a command from the USART Client (Driver Validation), executes it, and then waits for the next
command. Some commands include additional input/output data phases.

\section usart_server_config Configuration
Communication settings are defined in **USART_Server_Config.h** file.
\image html usart_server_config_h.png "USART_Server_Config.h configuration file in Configuration Wizard view mode"

\subsection usart_server_config_detail Configuration settings

- **Driver_USART#** - selects the USART driver instance used by the Server.
- **Communication settings**:
  - **Mode** - defines the mode used for command exchange (must match DUT setup).
  - Fixed parameters used for command exchange:
    - **Baudrate:** 115200
    - **Data Bits:** 8
    - **Parity:** None
    - **Stop Bits:** 1
    - **Flow Control:** None

\section usart_server_commands Commands
Commands are human-readable (ASCII) for easier analysis with a USART bus analyzer.

- **GET VER** - get Server version
- **GET CAP** - get Server capabilities (auto-detected upon reception)
- **SET BUF** - initialize Rx/Tx buffer content
- **GET BUF** - retrieve Rx/Tx buffer content
- **SET COM** - specify transfer configuration for the next **XFER**
- **XFER** - trigger a transfer
- **GET CNT** - retrieve number of items transferred in the last transfer
- **SET BRK** - generate break signal
- **GET BRK** - read break signal status
- **SET MDM** - activate modem lines
- **GET MDM** - read modem line status

\note For detailed command descriptions, see **README.md** in project root.

Example capture: validating the **Send** function in **Asynchronous** mode:
\image html usart_bus_async_send.png width=100%

\section usart_server_disc1 Running on STM32F429I-DISC1 board

Using the [Arm CMSIS Solution](https://marketplace.visualstudio.com/items?itemName=Arm.cmsis-csolution) VS Code extension,
create a new solution from **example**:

1. In the **CMSIS** extension, click **Create a New Solution**.
   \image html server_new_sol_create.png
2. Select an **STM32F429I-DISC1 board** as a **Target Board**.
3. Under **Templates, Reference Applications, and Examples**,
   select **USART Server (CMSIS-Driver Validation USART Server application for STM32F429I-DISC1 board)**.
   \image html usart_server_new_sol_disc1_example.png
4. Choose **Solution Base Folder** and click **Create**.
   \image html usart_server_new_sol_disc1_create.png
5. Build and run the **USART Server application** on the **STM32F429I-DISC1 board**.

<b>USART1 pinout (STM32F429I-DISC1):</b>

| USART function | Pin  |
| :------------- | :--: |
| Tx             | PA9  |
| Rx             | PA10 |
| CLK (sync)     | PA8  |
| CTS            | PA11 |
| RTS            | PA12 |
| DCD test pin   | PA13 |
| RI test pin    | PA14 |

\note **IMPORTANT:** Connect **ground between** the **USART Server** and the **Device (Driver) Under Test** to ensure a common
reference potential.
\note For synchronous testing, this hardware supports only **synchronous Master** mode, therefore it can only be used to
test **synchronous Slave** mode of the Driver Under Test.
\note The STM32F429I-DISC1 USART Server for **build-type: Debug** displays command execution on an on-board LCD.

\section usart_server_template Running on specific hardware
Using the [Arm CMSIS Solution](https://marketplace.visualstudio.com/items?itemName=Arm.cmsis-csolution) VS Code extension,
create a new solution from **template**:

1. In the **CMSIS** extension, click **Create a New Solution**.
   \image html server_new_sol_create.png
2. Select the **Target Board**.
3. Under **Templates, Reference Applications, and Examples**,
   select **USART Server (CMSIS-Driver Validation USART Server application)**.
   \image html usart_server_new_sol_template.png
4. Choose **Solution Base Folder**, click **Create**.
   \image html usart_server_new_sol_create.png
5. Select the board layer that provides an USART Driver, click **OK**.
6. If the board's USART is not routed to ARDUINO (or a different peripheral is required)
   , open **USART_Server_Config.h**, **Open Preview** and edit **Driver_USART#** to 
   the required instance.
7. Build and run the **USART Server application** on your hardware.

\note **IMPORTANT:** The target board's USART CMSIS-Driver must be **fully CMSIS compliant**!
\note The USART Server for **build-type: Debug** displays command execution on an STDOUT channel (typically Virtual COM port via Debug adapter).

\section usart_server_troubleshooting Troubleshooting

1. **Server not responding**
   - Reset the Server.
   - Verify the correct driver instance in `USART_Server_Config.h`.
   - Ensure communication settings (mode) match between Server and Driver Validation; if changed, rebuild and reflash.

2. Debug message **"Server Start failed!"** (build-type: Debug)
   - Check heap (must be > `2 * USART_SERVER_BUF_SIZE`).
   - Verify RTOS allows >= **512 bytes** allocation for the Server main thread (e.g., *Global Dynamic Memory size* in `RTX_Config.h` if RTX5).
   - Ensure the Server's USART driver supports all fixed settings:
     - Baudrate 115200, 8-N-1, Flow Control None.

*/
/*====================================================================================================*/
