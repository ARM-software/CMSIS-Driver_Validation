/*====================================================================================================*/
/**
\defgroup spi_config Configuration
\ingroup  dv_spi

The SPI driver validation settings are defined in the **DV_SPI_Config.h** configuration file.

\image html dv_spi_config_h.png "DV_SPI_Config.h configuration file in Configuration Wizard view mode"

Some settings depend on the test environment and may require adjustment to ensure proper operation of the SPI
Driver Validation suite.

\section spi_config_detail Configuration settings

**Driver_SPI#** selects the driver instance to be tested.  
Example: to test `Driver_SPI2`, set this value to `2`.

**Configuration** contains settings for **Test Mode**, **SPI Server**, and **Tests**:

- **Test Mode**: **Loopback** or **SPI Server**.  
  - *Loopback* is recommended for initial validation of **Master** functionality. It requires MOSI and MISO to be
    connected together to verify basic operation.  
  - For *full* CMSIS-Driver SPI compliance, use **SPI Server** mode.

- **SPI Server** (applies only when *Test Mode: SPI Server* is selected):  
  Defines communication settings between Driver Validation and the SPI Server and **must match** the Server.  
  - Fixed parameters:  
    - **Clock/Frame:** CPOL=0, CPHA=0  
    - **Data Bits:** 8  
    - **Bit Order:** MSB → LSB
  - Configurable parameters:  
    - **Slave Select** — **Software Controlled** (driver toggles SS using `ARM_SPI_CONTROL_SS`) or **Hardware Controlled**.  
    - **Bus Speed** — nominal bus speed for reliable command exchange with the Server.

- **Tests**: configuration for test execution.  
  - **Default settings** — defaults for data exchange tests (see \ref spi_tests_data_xchg).  
  - **Bus Speed** — minimum/maximum speeds used by \ref SPI_Bus_Speed_Min and \ref SPI_Bus_Speed_Max.  
  - **Number of Items** — item counts (including odd/unusual) used by \ref SPI_Number_Of_Items to verify conformance.

**Tests** section — enable/disable test groups (and individual tests):  
- **Driver Management** — see \ref spi_tests_drv_mgmt.  
- **Data Exchange** — see \ref spi_tests_data_xchg.  
- **Event** — see \ref spi_tests_evt.

*/

/*====================================================================================================*/
/**
\defgroup spi_server SPI Server
\ingroup  dv_spi

The **SPI Server** application provides features used by the CMSIS-Driver Validation suite to test physical operation of
the SPI driver.

It is available for the STMicroelectronics **STM32F429I-DISC1** board and as a template for **any board**
with available **Board Layer** and configured **CMSIS compliant SPI driver**.

\note STM32F429I-DISC1 was selected because its SPI driver is stable and supports all required features.
\note For running on STM32F429I-DISC1 board, see \ref spi_server_disc1.
\note For running on other hardware, see \ref spi_server_template.

\section spi_server_features Features
- Read **version** information
- Read **capabilities** information (auto-detected)
- Set and read **buffer** contents
- Read last **transfer count**
- Execute **transfer** in **Slave** or **Master** mode

\section spi_server_oper Operation
The Server waits for a command from the SPI Client (Driver Validation), executes it, and then waits for the next one.
Most commands have no additional data phase, though some do. The Server operates as an SPI **Slave** except when a **Master**
transfer is explicitly requested; after completing it, the Server returns to **Slave** mode.

\section spi_server_config Configuration
Communication settings are defined in **SPI_Server_Config.h** file.
\image html spi_server_config_h.png "SPI_Server_Config.h configuration file in Configuration Wizard view mode"

\subsection spi_server_config_detail Configuration settings

- **Driver_SPI#** — selects the driver instance used by the Server.
- **Communication settings** (fixed for command exchange):
  - **Mode:** Slave with **hardware-monitored Slave Select**
  - **Clock/Frame:** Clock Polarity 0/ Clock Phase 0
  - **Data Bits:** 8
  - **Bit Order:** MSB to LSB

\note The SPI Server receives commands as an SPI **Slave** using the **Slave Select** line. The Server’s SPI driver **must
support hardware-monitored Slave Select** functionality.

\section spi_server_commands Commands
Commands are human-readable (ASCII) for simpler analysis with an SPI bus analyzer.

- **GET VER** — get Server version
- **GET CAP** — get capabilities (auto-detected)
- **SET BUF** — initialize Rx/Tx buffer content
- **GET BUF** — retrieve Rx/Tx buffer content
- **SET COM** — specify transfer configuration for the next **XFER**
- **XFER** — trigger a transfer
- **GET CNT** — retrieve number of transferred items in the last transfer

\note For detailed command descriptions, see **README.md** in project root.

Example capture (Master transfer validation):
\image html spi_bus_master_ss_hw_ctrl_out.png width=100%

\section spi_server_disc1 Running on STM32F429I-DISC1 board

Using the [Arm CMSIS Solution](https://marketplace.visualstudio.com/items?itemName=Arm.cmsis-csolution) VS Code extension,
create a new solution from **example**:

1. In the **CMSIS** extension, click **Create a New Solution**.
   \image html server_new_sol_create.png
2. Select an **STM32F429I-DISC1 board** as a **Target Board**.
3. Under **Templates, Reference Applications, and Examples**,
   select **SPI Server (CMSIS-Driver Validation SPI Server application for STM32F429I-DISC1 board)**.
   \image html spi_server_new_sol_disc1_example.png
4. Choose **Solution Base Folder** and click **Create**.
   \image html spi_server_new_sol_disc1_create.png
5. Build and run the **SPI Server application** on the **STM32F429I-DISC1 board**.

<b>SPI1 pinout (STM32F429I-DISC1):</b>
| SPI function                     | Pin  |
| :------------------------------- | :--: |
| SPI Clock                        | PA5  |
| Master Output Slave Input (MOSI) | PA7  |
| Master Input Slave Output (MISO) | PB4  |
| Slave Select                     | PA15 |

\note **IMPORTANT:** Connect **ground between** the **SPI Server** and the **Device (Driver) Under Test** to ensure a common
reference potential.
\note The STM32F429I-DISC1 SPI Server does **not** support National Semiconductor **Microwire** frame format.
\note The STM32F429I-DISC1 SPI Server for **build-type: Debug** displays command execution on an on-board LCD.

\section spi_server_template Running on specific hardware
Using the [Arm CMSIS Solution](https://marketplace.visualstudio.com/items?itemName=Arm.cmsis-csolution) VS Code extension,
create a new solution from **template**:

1. In the **CMSIS** extension, click **Create a New Solution**.
   \image html server_new_sol_create.png
2. Select the **Target Board**.  
3. Under **Templates, Reference Applications, and Examples**,
   select **SPI Server (CMSIS-Driver Validation SPI Server application)**.
   \image html spi_server_new_sol_template.png
4. Choose **Solution Base Folder**, click **Create**.
   \image html spi_server_new_sol_create.png
5. Select the board layer that provides an SPI Driver.
   \image html server_new_sol_layer.png
6. If SPI is not routed to ARDUINO (or a different SPI peripheral is required),
   open **SPI_Server_Config.h**, **Open Preview** and edit **Driver_SPI#** to 
   the required instance.
7. Build and run the **SPI Server application** on your hardware.

\note **IMPORTANT:** The target board’s SPI CMSIS-Driver must be **fully CMSIS compliant**!
\note The SPI Server for **build-type: Debug** displays command execution on an STDOUT channel (typically Virtual COM port via Debug adapter).

\section spi_server_troubleshooting Troubleshooting

1. **Server not responding**
   - Reset the Server.
   - Verify the correct driver instance in `SPI_Server_Config.h`.
   - Reduce bus speed used for communication with the Server (in `DV_SPI_Config.h`).

2. Debug message **“Server Start failed!”** (build-type: Debug)
   - Check heap (must be > `2 * SPI_SERVER_BUF_SIZE`).
   - Verify RTOS allows ≥ **512 bytes** allocation for the Server main thread (e.g., *Global Dynamic Memory size* in `RTX_Config.h` if RTX5).
   - Ensure the Server’s SPI driver supports all fixed settings (Slave with hardware-monitored Slave Select, CPOL=0/CPHA=0, 8 bits, MSB to LSB).

3. **Tests report data mismatch**
   - Ensure Slave Select line has a pull-up to Vcc (3.3 V).
   - Keep **wires short and separate**; pair SCK and GND if possible.
   - Ensure the SPI driver does not drive Slave Select line while inactive.

*/
/*====================================================================================================*/
